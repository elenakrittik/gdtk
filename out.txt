   Compiling gdtk-lexer v0.1.0 (C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk-lexer)
   Compiling gdtk-parser v0.1.0 (C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk-parser)
   Compiling gdtk v0.1.0 (C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk)
    Finished dev [unoptimized + debuginfo] target(s) in 3.35s
     Running `target\debug\gdtk.exe parse --file .\incremental.gd`
[crates\gdtk\src\commands\parse.rs:13:9] &lexed = (
    [
        Token {
            range: 0..37,
            kind: Comment(
                " Everything after \"#\" is a comment.",
            ),
        },
        Token {
            range: 37..38,
            kind: Newline,
        },
        Token {
            range: 38..59,
            kind: Comment(
                " A file is a class!",
            ),
        },
        Token {
            range: 59..60,
            kind: Newline,
        },
        Token {
            range: 60..62,
            kind: Newline,
        },
        Token {
            range: 62..111,
            kind: Comment(
                " (optional) icon to show in the editor dialogs:",
            ),
        },
        Token {
            range: 111..112,
            kind: Newline,
        },
        Token {
            range: 112..113,
            kind: Annotation,
        },
        Token {
            range: 113..117,
            kind: Identifier(
                "icon",
            ),
        },
        Token {
            range: 117..118,
            kind: OpeningParenthesis,
        },
        Token {
            range: 118..151,
            kind: String(
                "res://path/to/optional/icon.svg",
            ),
        },
        Token {
            range: 151..152,
            kind: ClosingParenthesis,
        },
        Token {
            range: 152..154,
            kind: Newline,
        },
        Token {
            range: 154..156,
            kind: Newline,
        },
        Token {
            range: 156..187,
            kind: Comment(
                " (optional) class definition:",
            ),
        },
        Token {
            range: 187..188,
            kind: Newline,
        },
        Token {
            range: 188..198,
            kind: ClassName,
        },
        Token {
            range: 198..199,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 199..206,
            kind: Identifier(
                "MyClass",
            ),
        },
        Token {
            range: 206..208,
            kind: Newline,
        },
        Token {
            range: 208..210,
            kind: Newline,
        },
        Token {
            range: 210..225,
            kind: Comment(
                " Inheritance:",
            ),
        },
        Token {
            range: 225..226,
            kind: Newline,
        },
        Token {
            range: 226..233,
            kind: Extends,
        },
        Token {
            range: 233..234,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 234..243,
            kind: Identifier(
                "BaseClass",
            ),
        },
        Token {
            range: 243..245,
            kind: Newline,
        },
        Token {
            range: 245..247,
            kind: Newline,
        },
        Token {
            range: 247..249,
            kind: Newline,
        },
        Token {
            range: 249..269,
            kind: Comment(
                " Member variables.",
            ),
        },
        Token {
            range: 269..270,
            kind: Newline,
        },
        Token {
            range: 270..273,
            kind: Var,
        },
        Token {
            range: 273..274,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 274..275,
            kind: Identifier(
                "a",
            ),
        },
        Token {
            range: 275..276,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 276..277,
            kind: Assignment,
        },
        Token {
            range: 277..278,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 278..279,
            kind: Integer(
                5,
            ),
        },
        Token {
            range: 279..281,
            kind: Newline,
        },
        Token {
            range: 281..284,
            kind: Var,
        },
        Token {
            range: 284..285,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 285..286,
            kind: Identifier(
                "s",
            ),
        },
        Token {
            range: 286..287,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 287..288,
            kind: Assignment,
        },
        Token {
            range: 288..289,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 289..296,
            kind: String(
                "Hello",
            ),
        },
        Token {
            range: 296..298,
            kind: Newline,
        },
        Token {
            range: 298..301,
            kind: Var,
        },
        Token {
            range: 301..302,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 302..305,
            kind: Identifier(
                "arr",
            ),
        },
        Token {
            range: 305..306,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 306..307,
            kind: Assignment,
        },
        Token {
            range: 307..308,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 308..309,
            kind: OpeningBracket,
        },
        Token {
            range: 309..310,
            kind: Integer(
                1,
            ),
        },
        Token {
            range: 310..311,
            kind: Comma,
        },
        Token {
            range: 311..312,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 312..313,
            kind: Integer(
                2,
            ),
        },
        Token {
            range: 313..314,
            kind: Comma,
        },
        Token {
            range: 314..315,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 315..316,
            kind: Integer(
                3,
            ),
        },
        Token {
            range: 316..317,
            kind: ClosingBracket,
        },
        Token {
            range: 317..319,
            kind: Newline,
        },
        Token {
            range: 319..322,
            kind: Var,
        },
        Token {
            range: 322..323,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 323..327,
            kind: Identifier(
                "dict",
            ),
        },
        Token {
            range: 327..328,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 328..329,
            kind: Assignment,
        },
        Token {
            range: 329..330,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 330..331,
            kind: OpeningBrace,
        },
        Token {
            range: 331..336,
            kind: String(
                "key",
            ),
        },
        Token {
            range: 336..337,
            kind: Colon,
        },
        Token {
            range: 337..338,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 338..345,
            kind: String(
                "value",
            ),
        },
        Token {
            range: 345..346,
            kind: Comma,
        },
        Token {
            range: 346..347,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 347..348,
            kind: Integer(
                2,
            ),
        },
        Token {
            range: 348..349,
            kind: Colon,
        },
        Token {
            range: 349..350,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 350..351,
            kind: Integer(
                3,
            ),
        },
        Token {
            range: 351..352,
            kind: ClosingBrace,
        },
        Token {
            range: 352..354,
            kind: Newline,
        },
        Token {
            range: 354..357,
            kind: Var,
        },
        Token {
            range: 357..358,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 358..368,
            kind: Identifier(
                "other_dict",
            ),
        },
        Token {
            range: 368..369,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 369..370,
            kind: Assignment,
        },
        Token {
            range: 370..371,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 371..372,
            kind: OpeningBrace,
        },
        Token {
            range: 372..375,
            kind: Identifier(
                "key",
            ),
        },
        Token {
            range: 375..376,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 376..377,
            kind: Assignment,
        },
        Token {
            range: 377..378,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 378..385,
            kind: String(
                "value",
            ),
        },
        Token {
            range: 385..386,
            kind: Comma,
        },
        Token {
            range: 386..387,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 387..396,
            kind: Identifier(
                "other_key",
            ),
        },
        Token {
            range: 396..397,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 397..398,
            kind: Assignment,
        },
        Token {
            range: 398..399,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 399..400,
            kind: Integer(
                2,
            ),
        },
        Token {
            range: 400..401,
            kind: ClosingBrace,
        },
        Token {
            range: 401..403,
            kind: Newline,
        },
        Token {
            range: 403..406,
            kind: Var,
        },
        Token {
            range: 406..407,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 407..416,
            kind: Identifier(
                "typed_var",
            ),
        },
        Token {
            range: 416..417,
            kind: Colon,
        },
        Token {
            range: 417..418,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 418..421,
            kind: Identifier(
                "int",
            ),
        },
        Token {
            range: 421..423,
            kind: Newline,
        },
        Token {
            range: 423..426,
            kind: Var,
        },
        Token {
            range: 426..427,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 427..440,
            kind: Identifier(
                "inferred_type",
            ),
        },
        Token {
            range: 440..441,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 441..442,
            kind: Colon,
        },
        Token {
            range: 442..443,
            kind: Assignment,
        },
        Token {
            range: 443..444,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 444..452,
            kind: String(
                "String",
            ),
        },
        Token {
            range: 452..454,
            kind: Newline,
        },
        Token {
            range: 454..456,
            kind: Newline,
        },
        Token {
            range: 456..469,
            kind: Comment(
                " Constants.",
            ),
        },
        Token {
            range: 469..470,
            kind: Newline,
        },
        Token {
            range: 470..475,
            kind: Const,
        },
        Token {
            range: 475..476,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 476..482,
            kind: Identifier(
                "ANSWER",
            ),
        },
        Token {
            range: 482..483,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 483..484,
            kind: Assignment,
        },
        Token {
            range: 484..485,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 485..487,
            kind: Integer(
                42,
            ),
        },
        Token {
            range: 487..489,
            kind: Newline,
        },
        Token {
            range: 489..494,
            kind: Const,
        },
        Token {
            range: 494..495,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 495..501,
            kind: Identifier(
                "ANSWER",
            ),
        },
        Token {
            range: 501..502,
            kind: Colon,
        },
        Token {
            range: 502..503,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 503..506,
            kind: Identifier(
                "int",
            ),
        },
        Token {
            range: 506..507,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 507..508,
            kind: Assignment,
        },
        Token {
            range: 508..509,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 509..511,
            kind: Integer(
                42,
            ),
        },
        Token {
            range: 511..513,
            kind: Newline,
        },
        Token {
            range: 513..518,
            kind: Const,
        },
        Token {
            range: 518..519,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 519..527,
            kind: Identifier(
                "THE_NAME",
            ),
        },
        Token {
            range: 527..528,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 528..529,
            kind: Assignment,
        },
        Token {
            range: 529..530,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 530..538,
            kind: String(
                "Charly",
            ),
        },
        Token {
            range: 538..540,
            kind: Newline,
        },
        Token {
            range: 540..545,
            kind: Const,
        },
        Token {
            range: 545..546,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 546..554,
            kind: Identifier(
                "THE_NAME",
            ),
        },
        Token {
            range: 554..555,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 555..556,
            kind: Colon,
        },
        Token {
            range: 556..557,
            kind: Assignment,
        },
        Token {
            range: 557..558,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 558..566,
            kind: String(
                "Charly",
            ),
        },
        Token {
            range: 566..568,
            kind: Newline,
        },
        Token {
            range: 568..570,
            kind: Newline,
        },
        Token {
            range: 570..579,
            kind: Comment(
                " Enums.",
            ),
        },
        Token {
            range: 579..580,
            kind: Newline,
        },
        Token {
            range: 580..584,
            kind: Enum,
        },
        Token {
            range: 584..585,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 585..586,
            kind: OpeningBrace,
        },
        Token {
            range: 586..598,
            kind: Identifier(
                "UNIT_NEUTRAL",
            ),
        },
        Token {
            range: 598..599,
            kind: Comma,
        },
        Token {
            range: 599..600,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 600..610,
            kind: Identifier(
                "UNIT_ENEMY",
            ),
        },
        Token {
            range: 610..611,
            kind: Comma,
        },
        Token {
            range: 611..612,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 612..621,
            kind: Identifier(
                "UNIT_ALLY",
            ),
        },
        Token {
            range: 621..622,
            kind: ClosingBrace,
        },
        Token {
            range: 622..624,
            kind: Newline,
        },
        Token {
            range: 624..628,
            kind: Enum,
        },
        Token {
            range: 628..629,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 629..634,
            kind: Identifier(
                "Named",
            ),
        },
        Token {
            range: 634..635,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 635..636,
            kind: OpeningBrace,
        },
        Token {
            range: 636..643,
            kind: Identifier(
                "THING_1",
            ),
        },
        Token {
            range: 643..644,
            kind: Comma,
        },
        Token {
            range: 644..645,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 645..652,
            kind: Identifier(
                "THING_2",
            ),
        },
        Token {
            range: 652..653,
            kind: Comma,
        },
        Token {
            range: 653..654,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 654..667,
            kind: Identifier(
                "ANOTHER_THING",
            ),
        },
        Token {
            range: 667..668,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 668..669,
            kind: Assignment,
        },
        Token {
            range: 669..670,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 670..671,
            kind: Minus,
        },
        Token {
            range: 671..672,
            kind: Integer(
                1,
            ),
        },
        Token {
            range: 672..673,
            kind: ClosingBrace,
        },
        Token {
            range: 673..675,
            kind: Newline,
        },
        Token {
            range: 675..677,
            kind: Newline,
        },
        Token {
            range: 677..702,
            kind: Comment(
                " Built-in vector types.",
            ),
        },
        Token {
            range: 702..703,
            kind: Newline,
        },
        Token {
            range: 703..706,
            kind: Var,
        },
        Token {
            range: 706..707,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 707..709,
            kind: Identifier(
                "v2",
            ),
        },
        Token {
            range: 709..710,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 710..711,
            kind: Assignment,
        },
        Token {
            range: 711..712,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 712..719,
            kind: Identifier(
                "Vector2",
            ),
        },
        Token {
            range: 719..720,
            kind: OpeningParenthesis,
        },
        Token {
            range: 720..721,
            kind: Integer(
                1,
            ),
        },
        Token {
            range: 721..722,
            kind: Comma,
        },
        Token {
            range: 722..723,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 723..724,
            kind: Integer(
                2,
            ),
        },
        Token {
            range: 724..725,
            kind: ClosingParenthesis,
        },
        Token {
            range: 725..727,
            kind: Newline,
        },
        Token {
            range: 727..730,
            kind: Var,
        },
        Token {
            range: 730..731,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 731..733,
            kind: Identifier(
                "v3",
            ),
        },
        Token {
            range: 733..734,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 734..735,
            kind: Assignment,
        },
        Token {
            range: 735..736,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 736..743,
            kind: Identifier(
                "Vector3",
            ),
        },
        Token {
            range: 743..744,
            kind: OpeningParenthesis,
        },
        Token {
            range: 744..745,
            kind: Integer(
                1,
            ),
        },
        Token {
            range: 745..746,
            kind: Comma,
        },
        Token {
            range: 746..747,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 747..748,
            kind: Integer(
                2,
            ),
        },
        Token {
            range: 748..749,
            kind: Comma,
        },
        Token {
            range: 749..750,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 750..751,
            kind: Integer(
                3,
            ),
        },
        Token {
            range: 751..752,
            kind: ClosingParenthesis,
        },
        Token {
            range: 752..754,
            kind: Newline,
        },
        Token {
            range: 754..757,
            kind: Var,
        },
        Token {
            range: 757..758,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 758..759,
            kind: Identifier(
                "i",
            ),
        },
        Token {
            range: 759..760,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 760..761,
            kind: Assignment,
        },
        Token {
            range: 761..762,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 762..768,
            kind: Identifier(
                "callme",
            ),
        },
        Token {
            range: 768..769,
            kind: OpeningParenthesis,
        },
        Token {
            range: 769..770,
            kind: ClosingParenthesis,
        },
        Token {
            range: 770..772,
            kind: Newline,
        },
        Token {
            range: 772..775,
            kind: Var,
        },
        Token {
            range: 775..776,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 776..778,
            kind: Identifier(
                "hi",
            ),
        },
        Token {
            range: 778..779,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 779..780,
            kind: Assignment,
        },
        Token {
            range: 780..781,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 781..786,
            kind: Identifier(
                "callv",
            ),
        },
        Token {
            range: 786..787,
            kind: OpeningParenthesis,
        },
        Token {
            range: 787..793,
            kind: Identifier(
                "callme",
            ),
        },
        Token {
            range: 793..794,
            kind: OpeningParenthesis,
        },
        Token {
            range: 794..795,
            kind: ClosingParenthesis,
        },
        Token {
            range: 795..796,
            kind: ClosingParenthesis,
        },
        Token {
            range: 796..798,
            kind: Newline,
        },
        Token {
            range: 798..800,
            kind: Newline,
        },
        Token {
            range: 800..813,
            kind: Comment(
                " Functions.",
            ),
        },
        Token {
            range: 813..814,
            kind: Newline,
        },
        Token {
            range: 814..818,
            kind: Func,
        },
        Token {
            range: 818..819,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 819..832,
            kind: Identifier(
                "some_function",
            ),
        },
        Token {
            range: 832..833,
            kind: OpeningParenthesis,
        },
        Token {
            range: 833..839,
            kind: Identifier(
                "param1",
            ),
        },
        Token {
            range: 839..840,
            kind: Comma,
        },
        Token {
            range: 840..841,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 841..847,
            kind: Identifier(
                "param2",
            ),
        },
        Token {
            range: 847..848,
            kind: Colon,
        },
        Token {
            range: 848..849,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 849..852,
            kind: Identifier(
                "int",
            ),
        },
        Token {
            range: 852..853,
            kind: Comma,
        },
        Token {
            range: 853..854,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 854..860,
            kind: Identifier(
                "param3",
            ),
        },
        Token {
            range: 860..861,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 861..862,
            kind: Assignment,
        },
        Token {
            range: 862..863,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 863..864,
            kind: Integer(
                1,
            ),
        },
        Token {
            range: 864..865,
            kind: Comma,
        },
        Token {
            range: 865..866,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 866..872,
            kind: Identifier(
                "param4",
            ),
        },
        Token {
            range: 872..873,
            kind: Colon,
        },
        Token {
            range: 873..874,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 874..877,
            kind: Identifier(
                "int",
            ),
        },
        Token {
            range: 877..878,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 878..879,
            kind: Assignment,
        },
        Token {
            range: 879..880,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 880..881,
            kind: Integer(
                1,
            ),
        },
        Token {
            range: 881..882,
            kind: Comma,
        },
        Token {
            range: 882..883,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 883..889,
            kind: Identifier(
                "param5",
            ),
        },
        Token {
            range: 889..890,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 890..891,
            kind: Colon,
        },
        Token {
            range: 891..892,
            kind: Assignment,
        },
        Token {
            range: 892..893,
            kind: Blank(
                " ",
            ),
        },
        Token {
            range: 893..894,
            kind: Integer(
                1,
            ),
        },
        Token {
            range: 894..895,
            kind: ClosingParenthesis,
        },
        Token {
            range: 895..896,
            kind: Colon,
        },
        Token {
            range: 896..898,
            kind: Newline,
        },
        Token {
            range: 898..899,
            kind: Indent,
        },
        Token {
            range: 899..903,
            kind: Pass,
        },
        Token {
            range: 903..905,
            kind: Dedent,
        },
        Token {
            range: 903..905,
            kind: Newline,
        },
        Token {
            range: 905..933,
            kind: Comment(
                "     const local_const = 5",
            ),
        },
        Token {
            range: 933..934,
            kind: Newline,
        },
        Token {
            range: 934..937,
            kind: Comment(
                " ",
            ),
        },
        Token {
            range: 937..938,
            kind: Newline,
        },
        Token {
            range: 938..969,
            kind: Comment(
                "     if param1 < local_const:",
            ),
        },
        Token {
            range: 969..970,
            kind: Newline,
        },
        Token {
            range: 970..994,
            kind: Comment(
                "         print(param1)",
            ),
        },
        Token {
            range: 994..995,
            kind: Newline,
        },
        Token {
            range: 995..1018,
            kind: Comment(
                "     elif param2 > 5:",
            ),
        },
        Token {
            range: 1018..1019,
            kind: Newline,
        },
        Token {
            range: 1019..1043,
            kind: Comment(
                "         print(param2)",
            ),
        },
        Token {
            range: 1043..1044,
            kind: Newline,
        },
        Token {
            range: 1044..1056,
            kind: Comment(
                "     else:",
            ),
        },
        Token {
            range: 1056..1057,
            kind: Newline,
        },
        Token {
            range: 1057..1082,
            kind: Comment(
                "         print(\"Fail!\")",
            ),
        },
        Token {
            range: 1082..1083,
            kind: Newline,
        },
        Token {
            range: 1083..1086,
            kind: Comment(
                " ",
            ),
        },
        Token {
            range: 1086..1087,
            kind: Newline,
        },
        Token {
            range: 1087..1113,
            kind: Comment(
                "     for i in range(20):",
            ),
        },
        Token {
            range: 1113..1114,
            kind: Newline,
        },
        Token {
            range: 1114..1133,
            kind: Comment(
                "         print(i)",
            ),
        },
        Token {
            range: 1133..1134,
            kind: Newline,
        },
        Token {
            range: 1134..1137,
            kind: Comment(
                " ",
            ),
        },
        Token {
            range: 1137..1138,
            kind: Newline,
        },
        Token {
            range: 1138..1163,
            kind: Comment(
                "     while param2 != 0:",
            ),
        },
        Token {
            range: 1163..1164,
            kind: Newline,
        },
        Token {
            range: 1164..1186,
            kind: Comment(
                "         param2 -= 1",
            ),
        },
        Token {
            range: 1186..1187,
            kind: Newline,
        },
        Token {
            range: 1187..1190,
            kind: Comment(
                " ",
            ),
        },
        Token {
            range: 1190..1191,
            kind: Newline,
        },
        Token {
            range: 1191..1211,
            kind: Comment(
                "     match param3:",
            ),
        },
        Token {
            range: 1211..1212,
            kind: Newline,
        },
        Token {
            range: 1212..1225,
            kind: Comment(
                "         3:",
            ),
        },
        Token {
            range: 1225..1226,
            kind: Newline,
        },
        Token {
            range: 1226..1262,
            kind: Comment(
                "             print(\"param3 is 3!\")",
            ),
        },
        Token {
            range: 1262..1263,
            kind: Newline,
        },
        Token {
            range: 1263..1276,
            kind: Comment(
                "         _:",
            ),
        },
        Token {
            range: 1276..1277,
            kind: Newline,
        },
        Token {
            range: 1277..1317,
            kind: Comment(
                "             print(\"param3 is not 3!\")",
            ),
        },
        Token {
            range: 1317..1318,
            kind: Newline,
        },
        Token {
            range: 1318..1321,
            kind: Comment(
                " ",
            ),
        },
        Token {
            range: 1321..1322,
            kind: Newline,
        },
        Token {
            range: 1322..1355,
            kind: Comment(
                "     var local_var = param1 + 3",
            ),
        },
        Token {
            range: 1355..1356,
            kind: Newline,
        },
        Token {
            range: 1356..1379,
            kind: Comment(
                "     return local_var",
            ),
        },
        Token {
            range: 1379..1380,
            kind: Newline,
        },
        Token {
            range: 1380..1382,
            kind: Newline,
        },
        Token {
            range: 1382..1384,
            kind: Newline,
        },
        Token {
            range: 1384..1459,
            kind: Comment(
                " Functions override functions with the same name on the base/super class.",
            ),
        },
        Token {
            range: 1459..1460,
            kind: Newline,
        },
        Token {
            range: 1460..1507,
            kind: Comment(
                " If you still want to call them, use \"super\":",
            ),
        },
        Token {
            range: 1507..1508,
            kind: Newline,
        },
        Token {
            range: 1508..1534,
            kind: Comment(
                " func something(p1, p2):",
            ),
        },
        Token {
            range: 1534..1535,
            kind: Newline,
        },
        Token {
            range: 1535..1555,
            kind: Comment(
                "     super(p1, p2)",
            ),
        },
        Token {
            range: 1555..1556,
            kind: Newline,
        },
        Token {
            range: 1556..1558,
            kind: Newline,
        },
        Token {
            range: 1558..1560,
            kind: Newline,
        },
        Token {
            range: 1560..1626,
            kind: Comment(
                " It's also possible to call another function in the super class:",
            ),
        },
        Token {
            range: 1626..1627,
            kind: Newline,
        },
        Token {
            range: 1627..1659,
            kind: Comment(
                " func other_something(p1, p2):",
            ),
        },
        Token {
            range: 1659..1660,
            kind: Newline,
        },
        Token {
            range: 1660..1690,
            kind: Comment(
                "     super.something(p1, p2)",
            ),
        },
        Token {
            range: 1690..1691,
            kind: Newline,
        },
        Token {
            range: 1691..1693,
            kind: Newline,
        },
        Token {
            range: 1693..1695,
            kind: Newline,
        },
        Token {
            range: 1695..1709,
            kind: Comment(
                " Inner class",
            ),
        },
        Token {
            range: 1709..1710,
            kind: Newline,
        },
        Token {
            range: 1710..1729,
            kind: Comment(
                " class Something:",
            ),
        },
        Token {
            range: 1729..1730,
            kind: Newline,
        },
        Token {
            range: 1730..1747,
            kind: Comment(
                "     var a = 10",
            ),
        },
        Token {
            range: 1747..1748,
            kind: Newline,
        },
        Token {
            range: 1748..1750,
            kind: Newline,
        },
        Token {
            range: 1750..1752,
            kind: Newline,
        },
        Token {
            range: 1752..1766,
            kind: Comment(
                " Constructor",
            ),
        },
        Token {
            range: 1766..1767,
            kind: Newline,
        },
        Token {
            range: 1767..1783,
            kind: Comment(
                " func _init():",
            ),
        },
        Token {
            range: 1783..1784,
            kind: Newline,
        },
        Token {
            range: 1784..1812,
            kind: Comment(
                "     print(\"Constructed!\")",
            ),
        },
        Token {
            range: 1812..1813,
            kind: Newline,
        },
        Token {
            range: 1813..1844,
            kind: Comment(
                "     var lv = Something.new()",
            ),
        },
        Token {
            range: 1844..1845,
            kind: Newline,
        },
        Token {
            range: 1845..1863,
            kind: Comment(
                "     print(lv.a)",
            ),
        },
        Token {
            range: 1863..1864,
            kind: Newline,
        },
    ],
    [],
)
[crates\gdtk-parser\src\functions.rs:23:35] "got comma" = "got comma"
[crates\gdtk-parser\src\functions.rs:23:35] "got comma" = "got comma"
thread 'main' panicked at crates\gdtk-parser\src\functions.rs:69:18:
expected TokenKind::Blank(b), found Some(Token { range: 898..899, kind: Indent })
stack backtrace:
   0:     0x7ff66bc929a2 - std::sys_common::backtrace::_print::impl$0::fmt
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\sys_common\backtrace.rs:44
   1:     0x7ff66bcae38d - core::fmt::rt::Argument::fmt
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\core\src\fmt\rt.rs:142
   2:     0x7ff66bcae38d - core::fmt::write
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\core\src\fmt\mod.rs:1120
   3:     0x7ff66bc8e771 - std::io::Write::write_fmt<std::sys::pal::windows::stdio::Stderr>
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\io\mod.rs:1810
   4:     0x7ff66bc927ca - std::sys_common::backtrace::_print
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\sys_common\backtrace.rs:47
   5:     0x7ff66bc927ca - std::sys_common::backtrace::print
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\sys_common\backtrace.rs:34
   6:     0x7ff66bc94a19 - std::panicking::default_hook::closure$1
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panicking.rs:272
   7:     0x7ff66bc946d5 - std::panicking::default_hook
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panicking.rs:292
   8:     0x7ff66bc94f34 - std::panicking::rust_panic_with_hook
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panicking.rs:781
   9:     0x7ff66bc94e09 - std::panicking::begin_panic_handler::closure$0
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panicking.rs:659
  10:     0x7ff66bc93049 - std::sys_common::backtrace::__rust_end_short_backtrace<std::panicking::begin_panic_handler::closure_env$0,never$>
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\sys_common\backtrace.rs:171
  11:     0x7ff66bc94ad6 - std::panicking::begin_panic_handler
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panicking.rs:647
  12:     0x7ff66bcb7687 - core::panicking::panic_fmt
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\core\src\panicking.rs:72
  13:     0x7ff66bab9b71 - gdtk_parser::functions::parse_func_body<alloc::vec::into_iter::IntoIter<gdtk_lexer::token::Token,alloc::alloc::Global> >
                               at C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk-parser\src\functions.rs:69
  14:     0x7ff66bab9747 - gdtk_parser::functions::parse_func<alloc::vec::into_iter::IntoIter<gdtk_lexer::token::Token,alloc::alloc::Global> >
                               at C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk-parser\src\functions.rs:56
  15:     0x7ff66bab1c65 - gdtk_parser::parse_file
                               at C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk-parser\src\lib.rs:68
  16:     0x7ff66b4a6722 - gdtk::commands::parse::run
                               at C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk\src\commands\parse.rs:15
  17:     0x7ff66b4927c5 - gdtk::main::async_block$0
                               at C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk\src\main.rs:12
  18:     0x7ff66b499550 - tokio::runtime::park::impl$4::block_on::closure$0<enum2$<gdtk::main::async_block_env$0> >
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\park.rs:282
  19:     0x7ff66b498f5a - tokio::runtime::coop::with_budget
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\coop.rs:107
  20:     0x7ff66b498f5a - tokio::runtime::coop::budget
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\coop.rs:73
  21:     0x7ff66b498f5a - tokio::runtime::park::CachedParkThread::block_on<enum2$<gdtk::main::async_block_env$0> >
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\park.rs:282
  22:     0x7ff66b48f2f6 - tokio::runtime::context::blocking::BlockingRegionGuard::block_on<enum2$<gdtk::main::async_block_env$0> >
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\context\blocking.rs:66
  23:     0x7ff66b47d1e9 - tokio::runtime::scheduler::multi_thread::impl$0::block_on::closure$0<enum2$<gdtk::main::async_block_env$0> >
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\scheduler\multi_thread\mod.rs:87
  24:     0x7ff66b499918 - tokio::runtime::context::runtime::enter_runtime<tokio::runtime::scheduler::multi_thread::impl$0::block_on::closure_env$0<enum2$<gdtk::main::async_block_env$0> >,enum2$<core::result::Result<tuple$<>,anyhow::Error> > >
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\context\runtime.rs:65
  25:     0x7ff66b47d1a4 - tokio::runtime::scheduler::multi_thread::MultiThread::block_on<enum2$<gdtk::main::async_block_env$0> >
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\scheduler\multi_thread\mod.rs:86
  26:     0x7ff66b4743fa - tokio::runtime::runtime::Runtime::block_on<enum2$<gdtk::main::async_block_env$0> >
                               at D:\Scoop\persist\rustup\.cargo\registry\src\index.crates.io-6f17d22bba15001f\tokio-1.35.1\src\runtime\runtime.rs:350
  27:     0x7ff66b47cc07 - gdtk::main
                               at C:\Users\lena\Development\Projects\Rust\gdtk\crates\gdtk\src\main.rs:11
  28:     0x7ff66b49bb7b - core::ops::function::FnOnce::call_once<enum2$<core::result::Result<tuple$<>,anyhow::Error> > (*)(),tuple$<> >
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c\library\core\src\ops\function.rs:250
  29:     0x7ff66b4755ae - std::sys_common::backtrace::__rust_begin_short_backtrace<enum2$<core::result::Result<tuple$<>,anyhow::Error> > (*)(),enum2$<core::result::Result<tuple$<>,anyhow::Error> > >
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c\library\std\src\sys_common\backtrace.rs:155
  30:     0x7ff66b4776b1 - std::rt::lang_start::closure$0<enum2$<core::result::Result<tuple$<>,anyhow::Error> > >
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c\library\std\src\rt.rs:166
  31:     0x7ff66bc882c2 - std::rt::lang_start_internal::closure$2
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\rt.rs:148
  32:     0x7ff66bc882c2 - std::panicking::try::do_call
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panicking.rs:554
  33:     0x7ff66bc882c2 - std::panicking::try
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panicking.rs:518
  34:     0x7ff66bc882c2 - std::panic::catch_unwind
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\panic.rs:142
  35:     0x7ff66bc882c2 - std::rt::lang_start_internal
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c/library\std\src\rt.rs:148
  36:     0x7ff66b47768a - std::rt::lang_start<enum2$<core::result::Result<tuple$<>,anyhow::Error> > >
                               at /rustc/7ffc697ce10f19447c0ce338428ae4b9bc0c041c\library\std\src\rt.rs:165
  37:     0x7ff66b47cce9 - main
  38:     0x7ff66bcb56e0 - invoke_main
                               at D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:78
  39:     0x7ff66bcb56e0 - __scrt_common_main_seh
                               at D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288
  40:     0x7ff8ab9e7344 - BaseThreadInitThunk
  41:     0x7ff8ad1026b1 - RtlUserThreadStart
error: process didn't exit successfully: `target\debug\gdtk.exe parse --file .\incremental.gd` (exit code: 101)
